====== archiving photos: extracting images ======

I had another 10 minutes for my small archiving project this morning. Turns out I should have listened to my 7th grade((Or was it 6th grade? I can't even remember.)) math teacher: [[http://en.wikipedia.org/wiki/Trigonometry|Trigonometry]] is actually important. And now that I have worked myself through all "Trigonometry for kids" pages google shows up, it turns out I don't need all this for OpenCV.

You basically only need [[http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-getrotationmatrix2d|getRotationMatrix2D]] to get the rotation matrix for the [[http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-warpaffine|affine transformation]] and [[http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-getrectsubpix|getRectSubPix]] to crop the rotated image. Thanks a lot to: http://felix.abecassis.me/2011/10/opencv-rotation-deskewing/, it would have taken me a lot more minutes if I didn't see [[http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-getrectsubpix|getRectSubPix]]. 

In OpenCV this translates to (rest of code doesn't change):

<code cpp>
// [...]
	for (int i = 0; i < contours.size(); i++) {
		// first calculate the area to remove small areas
		double area = contourArea(contours[i]);
		// you probably have to adjust the size of the area
		// as it depends on the size of the rectangle
		if (area > 10000) {
			// get the bounding box of this contour
			RotatedRect rect = minAreaRect(contours[i]);
			// matrices we'll use
			Mat M, rotated, cropped;

			// get angle and size from the bounding box
			float angle = rect.angle;
			Size rect_size = rect.size;

			// thanks to http://felix.abecassis.me/2011/10/opencv-rotation-deskewing/
			if (rect.angle < -45.) {
				angle += 90.0;
				swap(rect_size.width, rect_size.height);
			}

			// http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-getrotationmatrix2d
			M = getRotationMatrix2D(rect.center, angle, 1.0);
			// http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-warpaffine
			warpAffine(src, rotated, M, src.size(), INTER_CUBIC);
			// yes yes, just a little scroll above getRotationMatrix2D:
			// http://opencv.willowgarage.com/documentation/cpp/geometric_image_transformations.html#cv-getrectsubpix
			getRectSubPix(rotated, rect_size, rect.center, cropped);

			imshow("cropped", cropped);
			waitKey(0);
			// write to file
			//std::stringstream ssfilename;
			//ssfilename << filename << i << ".jpg";
			//imwrite(ssfilename.str(), cropped);
		}
	}
[...]
</code>

and you end up with your extracted pictures:

| {{:blog:archiving_photos:image_0.jpg?200|}} | {{:blog:archiving_photos:image_1.jpg?200|}} |
| {{:blog:archiving_photos:image_4.jpg?200|}} | {{:blog:archiving_photos:image_5.jpg?200|}} |

So next thing is to put all this into a GUI! Forgot to mention I hacked a small Python Tkinter application to manually crop and rotate images: [[http://www.bytefish.de/files/python/cropper.py|files/python/cropper.py]].

{{tag>opencv cpp}}


~~DISCUSSION~~
